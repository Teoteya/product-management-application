name: CI/CD Embedded Tomcat Pipeline for Windows  # Название процесса CI/CD; можно написать любое имя

on:  # Определяем, когда запускать процесс
  push:  # Пайплайн будет запускаться при каждом push в репозиторий
    branches:  # Указываем, для каких веток запускать процесс
      - main  # Указана основная (main) ветка
  workflow_dispatch:  # Позволяет запускать вручную

jobs:  # Определяем работы (jobs), которые будут выполняться в пайплайне
  build:  # Название работы – сборка проекта и деплой
    runs-on: windows-latest  # Используем виртуальную машину с Windows для выполнения шагов

    steps:  # Список шагов, которые будут последовательно выполняться в рамках работы
      - name: Checkout repository  # Шаг для скачивания кода из репозитория
        uses: actions/checkout@v3  # Используем готовый GitHub Action для загрузки репозитория

      - name: Set up JDK 17  # Шаг для установки Java Development Kit (JDK) версии 17
        uses: actions/setup-java@v3  # Запускаем готовый action для установки Java
        with:
          java-version: '17'  # Указываем, какую версию JDK нужно установить
          distribution: 'temurin'  # Выбираем дистрибуцию OpenJDK от Adoptium (бесплатная и стабильная)

      - name: Debug workspace  # Проверяем, какие файлы есть в рабочей папке
        run: |
          cd $env:GITHUB_WORKSPACE/product-management-system
          ls

      - name: Build project  # Шаг для сборки проекта
        run: |
          cd $env:GITHUB_WORKSPACE/product-management-system
          mvn clean package -DskipTests

      


      - name: Deploy WAR to Embedded Tomcat
        shell: pwsh
        run: |
          Write-Output "Copying WAR file to Tomcat webapps..."
          Copy-Item "$env:GITHUB_WORKSPACE\target\product-management-system-0.0.1-SNAPSHOT.war" "C:\Tomcat\webapps\product-management-system.war" -Force

          Write-Output "Restarting Tomcat..."
          Restart-Service -Name "Tomcat"

      - name: Show application logs  # Вывод логов приложения
        if: always()
        shell: pwsh
        run: |
          Write-Output "Showing application logs..."
          Get-Content "$env:GITHUB_WORKSPACE\stdout.log" -ErrorAction SilentlyContinue
          Get-Content "$env:GITHUB_WORKSPACE\stderr.log" -ErrorAction SilentlyContinue

      - name: Check running processes  # Проверка, слушает ли приложение порт 8080
        if: always()
        shell: pwsh
        run: Get-NetTCPConnection | Where-Object { $_.LocalPort -eq 8080 }