name: CI/CD Embedded Tomcat Pipeline for Ubuntu with PostgreSQL

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345
          POSTGRES_DB: product-management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Debug workspace
        run: |
          cd "$GITHUB_WORKSPACE/product-management-system"
          ls -la

      - name: Build project
        run: |
          cd "$GITHUB_WORKSPACE/product-management-system"
          mvn clean package -DskipTests -e -X
          ls target

      

      - name: Check files in CI workspace
        run: |
          ls "$GITHUB_WORKSPACE"

      - name: Create default PostgreSQL user
        run: |
          docker exec $(docker ps -q -f name=postgres) psql -U postgres -c "CREATE ROLE root WITH LOGIN PASSWORD 'default_password';"

      

      - name: Extract and check for application.yml inside WAR
        env:
          SPRING_CONFIG_LOCATION: classpath:/application.yml
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/product-management
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: 12345
          SPRING_LIQUIBASE_URL: jdbc:postgresql://localhost:5432/product-management
          SPRING_LIQUIBASE_USER: postgres
          SPRING_LIQUIBASE_PASSWORD: 12345
        run: |
          mkdir tmp_extract
          cd tmp_extract
          jar -xf $GITHUB_WORKSPACE/product-management-system/target/product-management-system-0.0.1-SNAPSHOT.war
          find . -name "application.yml"

      - name: Set environment variables for Maven
        run: |
          export MAVEN_OPTS="-Dspring.datasource.url=jdbc:postgresql://localhost:5432/product-management \
                              -Dspring.datasource.username=postgres \
                              -Dspring.datasource.password=12345 \
                              -Dspring.liquibase.url=jdbc:postgresql://localhost:5432/product-management \
                              -Dspring.liquibase.user=postgres \
                              -Dspring.liquibase.password=12345"

      - name: Set environment variables
        run: |
          export SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/product-management
          export SPRING_DATASOURCE_USERNAME=postgres
          export SPRING_DATASOURCE_PASSWORD=12345
          export SPRING_LIQUIBASE_URL=jdbc:postgresql://localhost:5432/product-management
          export SPRING_LIQUIBASE_USER=postgres
          export SPRING_LIQUIBASE_PASSWORD=12345
          env | grep SPRING_

      - name: Show all environment variables
        run: env

      - name: Run Application using Embedded Tomcat
        run: |
          nohup java -jar "$GITHUB_WORKSPACE/product-management-system/target/product-management-system-0.0.1-SNAPSHOT.war" > "$GITHUB_WORKSPACE/stdout.log" 2> "$GITHUB_WORKSPACE/stderr.log" &
            --spring.datasource.url=jdbc:postgresql://localhost:5432/product-management \
            --spring.datasource.username=postgres \
            --spring.datasource.password=12345 \
            --spring.liquibase.url=jdbc:postgresql://localhost:5432/product-management \
            --spring.liquibase.user=postgres \
            --spring.liquibase.password=12345 \
            > "$GITHUB_WORKSPACE/stdout.log" 2> "$GITHUB_WORKSPACE/stderr.log" &
          sleep 90
          echo "Contents of stdout.log:"
          cat "$GITHUB_WORKSPACE/stdout.log" || echo "No stdout.log found"
          echo "Contents of stderr.log:"
          cat "$GITHUB_WORKSPACE/stderr.log" || echo "No stderr.log found"

      - name: List PostgreSQL connections
        if: always()
        run: |
          echo "Checking PostgreSQL active connections..."
          docker exec $(docker ps -q -f name=postgres) psql -U postgres -c "SELECT usename, datname FROM pg_stat_activity;"

      - name: Show environment variables with SPRING_
        if: always()
        run: env | grep SPRING_



      - name: Show application logs
        if: always()
        run: |
          echo "Contents of stdout.log:"
          cat "$GITHUB_WORKSPACE/stdout.log" || echo "No stdout.log found"
          echo "Contents of stderr.log:"
          cat "$GITHUB_WORKSPACE/stderr.log" || echo "No stderr.log found"

      - name: Check processes listening on port 8080
        if: always()
        run: ss -tuln | grep ':8080' || echo "No process is listening on port 8080"
